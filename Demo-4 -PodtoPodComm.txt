Demonstration : Pod to Pod Communication
========================================

Step 1:
db-pod.txt
===========
apiVersion: "v1"
kind: Pod
metadata:
  name: mysql
  labels:
    name: mysql
    app: demo
spec:
  containers:
    - name: mysql
      image: mysql:5.7
      ports:
        - containerPort: 3306
          protocol: TCP
      env:
        -
          name: "MYSQL_ROOT_PASSWORD"
          value: "password"

# kubectl create -f db-pod.txt
# is mysql pod running ?

Step 2:
Database Service under Cluster IP
=================================
db-svc.txt
==========
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    name: mysql
    app: demo  
spec: 
  ports: 
    - name: mysql
      port: 3306
      targetPort: 3306
  selector: 
    name: mysql
    app: demo

# kubectl create -f svc.txt
# kubectl describe svc mysql
? Note Target Port ?

Step 3:

notepad app.py
==============
from flask import Flask
from flask import Response
from flask import request
from redis import Redis
from datetime import datetime
import MySQLdb
import sys
import redis
import time
import hashlib
import os
import json

app = Flask(__name__)
startTime = datetime.now()
R_SERVER = redis.Redis(host=os.environ.get('REDIS_HOST', 'redis'), port=6379)

@app.route('/healthz')
def healthz():
    return Response("Is Healthy", status=200, mimetype='application/json')

@app.route('/healthzdb')
def testdb():
    try:
        db = MySQLdb.connect("mysql","root","password")
        cursor = db.cursor()
        cursor.execute("SELECT 1")
        return Response("DB is Healthy", status=200, mimetype='application/json')
    except:
        return Response("DB not Healthy", status=404, mimetype='application/json')

@app.route('/init')
def init():
    try:
       db = MySQLdb.connect("mysql","root","password")
       cursor = db.cursor()
       cursor.execute("DROP DATABASE IF EXISTS AZUREDB")
       cursor.execute("CREATE DATABASE AZUREDB")
       cursor.execute("USE AZUREDB")
       sql = """CREATE TABLE courses(id INT, coursenumber varchar(48),
                     coursetitle varchar(256), notes varchar(256));"""
       cursor.execute(sql)
       db.commit()
       return "\nDB Initialization done\n\n"
    except (MySQLdb.Error, MySQLdb.Warning) as e:
       return "MySQL Error: %s" % str(e)

@app.route("/courses/add", methods=['POST'])
def add_courses():

    try:
       db = MySQLdb.connect("mysql","root","password")
       cursor = db.cursor()
       cursor.execute("USE AZUREDB")
       req_json = request.get_json()
       cursor.execute("INSERT INTO courses (id, coursenumber, coursetitle, notes) VALUES (%s,%s,%s,%s)",
             (req_json['uid'], req_json['coursenumber'], req_json['coursetitle'], req_json['notes']))
       db.commit()
       return Response("Added\n\n", status=200, mimetype='application/json')
    except (MySQLdb.Error, MySQLdb.Warning) as e:
       return "MySQL Error: %s" % str(e)

@app.route('/courses/<uid>')
def get_courses(uid):
    try:
       hash = hashlib.sha224(str(uid)).hexdigest()
       key = "sql_cache:" + hash

       returnval = ""
       if (R_SERVER.get(key)):
           return "\n\nData from Redis Cache:\n" + R_SERVER.get(key)
       else:
           db = MySQLdb.connect("mysql","root","password")
           cursor = db.cursor()
           cursor.execute("USE AZUREDB")
           cursor.execute("select coursenumber, coursetitle, notes from courses where ID=" + str(uid))
           data = cursor.fetchall()
           if data:
               json_data = json.dumps(data)
               R_SERVER.set(key,json_data)
               R_SERVER.expire(key, 500)
               return R_SERVER.get(key) + "\n\nSuccess\n\n"
           else:
               return "\n\nRecord not found\n\n"
    except (MySQLdb.Error, MySQLdb.Warning) as e:
       return "MySQL Error: %s" % str(e)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)

Step 4:
=======
notepad requirements.txt
========================
flask
redis
mysql-python

Step 5:
========
notepad Dockerfile
==================

FROM python:2.7-onbuild
COPY app.py /app.py
EXPOSE 5000
CMD [ "python", "/app.py" ]

# minikube docker-env
# docker build -t newpy:1.0 -f Dockerfile.txt .
# docker inspect newpy:1.0

Step 6:
=======

two-cont.txt
========
  
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: demo
    name: web
  name: web1
spec:
  containers:
    - image: redis:latest
      name: redis
      ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
    - image: newpy:1.0
      name: python
      env:
        - name: REDIS_HOST
          value: localhost
      ports:
        - containerPort: 5000
          name: http
          protocol: TCP

# kubectl create -f two-cont.txt

Step 7:
========
notepad svc2.txt
================
apiVersion: v1
kind: Service
metadata:
  name: web
  labels:
    name: web
    app: demo
spec:
  selector:
    name: web
  type: NodePort
  ports:
   - port: 80
     name: http
     targetPort: 5000
     protocol: TCP

# kubectl create -f svc2.txt

Step 8:
========
# kubectl get pods
== is mysql and web1 running?
# kubectl logs web1 -c python 
--- Is Flask running
# minikube ip
# kubectl get svc
-- note down web1 - Forwarded Port number?
# curl <<minikube ip>:<DP_NUMBER>/healthzdb
# curl <<minikube ip>:<DP_NUMBER>/init

Step 9:
#kubectl logs web1 -c python

Step 10:
Clear Pods...
